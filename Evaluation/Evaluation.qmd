---
title: "Evaluation"
format: html
---

# 1. Load Libraries and Functions
```{r}
library(pacman)
p_load(remify, remstats, remstimate, shrinkem, tidyverse, patchwork)
load("../Functions/functions.RData")
```

# 2. Load in Generated Data

```{r}
# Load all files in "../GeneratedData/"
files <- list.files(path = "../GeneratedData/", full.names = TRUE)

# Loop through all files
for (file in files) {
  load(file)
}
```


# 3. Estimate the Models

## Apply `estimate_edgelists` to the Data

```{r}
# | eval = FALSE

# Set number of events
m <- c(100, 200, 400, 800, 1600, 3200)

# Set number of cores
ncores <- 7

t1 <- Sys.time()
estimates <- estimate_edgelists(edgelists, parameters, covar, num_cores = ncores, m = m)
t2 <- Sys.time()
(diff.time <- t2 - t1)

save(estimates, file = "../GeneratedData/estimates.RData")
```

# 4. Evaluate the Models

## 4.1. Variable Selection

### 4.1.1 True Discovery Rates

#### Endogenous Effects

```{r}
methods <- c("mle_05", "mle_01", "shrink_hs", "shrink_ridge")
endog_true_discovery_rates <- data.frame(m = c(100, 200, 400, 800, 1600, 3200),
                                   endog_mle05 = numeric(length(m)),
                                   endog_mle01 = numeric(length(m)),
                                   endog_hs = numeric(length(m)),
                                   endog_ridge = numeric(length(m)))

for (i in seq_along(methods)) {
  endog_true_discovery_rates[,i+1] <- discovery_rate(parameters, estimates, m = c(100, 200, 400, 800, 1600, 3200), edgelists, estimation = methods[i], coefficients = names(parameters[parameters[2:27] != 0]))$discovery_rate
}
```


#### Weak Exogenous Effects

```{r}
weak_true_discovery_rates <- data.frame(m = c(100, 200, 400, 800, 1600, 3200),
                                   weak_mle05 = numeric(length(m)),
                                   weak_mle01 = numeric(length(m)),
                                   weak_hs = numeric(length(m)),
                                   weak_ridge = numeric(length(m)))
for (i in seq_along(methods)) {
  weak_true_discovery_rates[,i+1] <- discovery_rate(parameters, estimates, m = c(100, 200, 400, 800, 1600, 3200), edgelists, estimation = methods[i], coefficients = names(parameters[parameters ==  log(1.22)]))$discovery_rate
}
```

#### Medium Exogenous Effects

```{r}
medium_true_discovery_rates <- data.frame(m = c(100, 200, 400, 800, 1600, 3200),
                                   medium_mle05 = numeric(length(m)),
                                   medium_mle01 = numeric(length(m)),
                                   medium_hs = numeric(length(m)),
                                   medium_ridge = numeric(length(m)))

for (i in seq_along(methods)) {
  medium_true_discovery_rates[,i+1] <- discovery_rate(parameters, estimates, m = c(100, 200, 400, 800, 1600, 3200), edgelists, estimation = methods[i], coefficients = names(parameters[parameters ==  log(1.86)]))$discovery_rate
}

```

#### Strong Exogenous Effects

```{r}
strong_true_discovery_rates <- data.frame(m = c(100, 200, 400, 800, 1600, 3200),
                                   strong_mle05 = numeric(length(m)),
                                   strong_mle01 = numeric(length(m)),
                                   strong_hs = numeric(length(m)),
                                   strong_ridge = numeric(length(m)))

for (i in seq_along(methods)) {
  strong_true_discovery_rates[,i+1] <- discovery_rate(parameters, estimates, m = c(100, 200, 400, 800, 1600, 3200), edgelists, estimation = methods[i], coefficients = names(parameters[parameters ==  log(3.00)]))$discovery_rate
}

```

#### Plots

```{r}
endog_plot_true <- plot_true_discovery_rates(endog_true_discovery_rates, "Endogenous Effects")
weak_plot_true <- plot_true_discovery_rates(weak_true_discovery_rates, "Weak Exogenous Effects")
medium_plot_true <- plot_true_discovery_rates(medium_true_discovery_rates, "Medium Exogenous Effects")
strong_plot_true <- plot_true_discovery_rates(strong_true_discovery_rates, "Strong Exogenous Effects")

# Combine the plots and collect axis titles and legends
combined_plot_true <- (endog_plot_true + weak_plot_true + medium_plot_true + strong_plot_true) +
  plot_layout(guides = "collect", axis_titles = "collect") &  # Combine legends
  theme(legend.position = "bottom")  # Position the legend at the bottom
```

#### Save the Plot

```{r}
ggsave("../Plots/true_discovery_rates.png", combined_plot_true, width = 12, height = 8)
```



### 4.1.2 False Discovery Rates

#### Endogenous Effects

```{r}
endog_false_discovery_rates <- data.frame(
  m = c(100, 200, 400, 800, 1600, 3200),
  endog_mle05 = numeric(length(m)),
  endog_mle01 = numeric(length(m)),
  endog_hs = numeric(length(m)),
  endog_ridge = numeric(length(m))
)

for (i in seq_along(methods)) {
  endog_false_discovery_rates[,i+1] <- discovery_rate(parameters, estimates, m = c(100, 200, 400, 800, 1600, 3200), edgelists, estimation = methods[i], coefficients = names(parameters[parameters[2:27] ==  0]))$discovery_rate
}
```

#### Exogenous Effects

```{r}
exog_false_discovery_rates <- data.frame(
  m = c(100, 200, 400, 800, 1600, 3200),
  exog_mle05 = numeric(length(m)),
  exog_mle01 = numeric(length(m)),
  exog_hs = numeric(length(m)),
  exog_ridge = numeric(length(m))
)

for (i in seq_along(methods)) {
  exog_false_discovery_rates[,i+1] <- discovery_rate(parameters, estimates, m = c(100, 200, 400, 800, 1600, 3200), edgelists, estimation = methods[i], coefficients = names(parameters[parameters[28:51] ==  0]))$discovery_rate
}
```

#### Plots

```{r}
endog_plot_false <- plot_false_discovery_rates(endog_false_discovery_rates, "Endogenous Effects")
exog_plot_false <- plot_false_discovery_rates(exog_false_discovery_rates, "Exogenous Effects")


# Combine the plots and collect axis titles and legends
combined_plot_false <- (endog_plot_false + exog_plot_false) +
  plot_layout(guides = "collect", axis_titles = "collect") &  # Combine legends
  theme(legend.position = "bottom")  # Position the legend at the bottom
```

#### Save the Plot

```{r}
ggsave("../Plots/false_discovery_rates.png", combined_plot_false, width = 12, height = 5)
```

## 4.2 Bias and Variance

```{r}
bias_mle <- bias_estimates(parameters = parameters,
               estimates = estimates,
               method = "mle_coefs") %>%
  select(bias) %>%
  summarise(mean = mean(bias, na.rm = TRUE),
            variance = var(bias, na.rm = TRUE))

bias_hs <- bias_estimates(parameters = parameters,
               estimates = estimates,
               method = "shrink_coefs_hs") %>%
  select(bias) %>%
  summarise(mean = mean(bias, na.rm = TRUE),
            variance = var(bias, na.rm = TRUE))

bias_ridge <- bias_estimates(parameters = parameters,
               estimates = estimates,
               method = "shrink_coefs_ridge") %>%
  select(bias) %>%
  summarise(mean = mean(bias, na.rm = TRUE),
            variance = var(bias, na.rm = TRUE))
```


## 4.3 Predictive Performance

### 4.3.1 In-Sample Predictions

```{r}
m = c(100, 200, 400, 800, 1600, 3200)

# Initialize an empty data frame to store results
results <- data.frame(
  m = integer(),
  iteration = integer(),
  pp_mle = numeric(),
  pp_ridge = numeric(),
  pp_hs = numeric()
)

# Iterate through the values of m and the 20 iterations
for (i in seq_along(m)) {
  m_key <- paste0("m=", m[i])
  for (j in 1:30) {
    # Initialize variables for the current iteration
    mle_value <- NA
    ridge_value <- NA
    hs_value <- NA

    # Attempt to compute predictive performance, filling with NA if an error occurs
    tryCatch({
      mle_value <- predictive_performance(
        edgelists[[j]][1:m[i], ], covar,
        estimates[[m_key]][["mle_coefs"]][[j]][, 1],
        generate_formula(parameters), warnings = FALSE
      )
    }, error = function(e) {
      mle_value <- NA
    })

    tryCatch({
      ridge_value <- predictive_performance(
        edgelists[[j]][1:m[i], ], covar,
        estimates[[m_key]][["shrink_coefs_ridge"]][[j]][, 4],
        generate_formula(parameters), warnings = FALSE
      )
    }, error = function(e) {
      ridge_value <- NA
    })

    tryCatch({
      hs_value <- predictive_performance(
        edgelists[[j]][1:m[i], ], covar,
        estimates[[m_key]][["shrink_coefs_hs"]][[j]][, 4],
        generate_formula(parameters), warnings = FALSE
      )
    }, error = function(e) {
      hs_value <- NA
    })

    # Append the results to the data frame
    results <- results %>% add_row(
      m = m[i],
      iteration = j,
      pp_mle = mle_value,
      pp_ridge = ridge_value,
      pp_hs = hs_value
    )
  }
}

library(dplyr)
library(kableExtra)

latex_table <- results %>%
  group_by(m) %>%
  summarise(
    pp_mle = round(mean(pp_mle, na.rm = TRUE), 3),
    pp_ridge = round(mean(pp_ridge, na.rm = TRUE), 3),
    pp_hs = round(mean(pp_hs, na.rm = TRUE), 3)
  ) %>%
  rowwise() %>%
  mutate(
    max_value = max(c(pp_mle, pp_ridge, pp_hs), na.rm = TRUE),
    pp_mle = ifelse(pp_mle == max_value, 
                    cell_spec(pp_mle, "latex", bold = TRUE), 
                    as.character(pp_mle)),
    pp_ridge = ifelse(pp_ridge == max_value, 
                      cell_spec(pp_ridge, "latex", bold = TRUE), 
                      as.character(pp_ridge)),
    pp_hs = ifelse(pp_hs == max_value, 
                   cell_spec(pp_hs, "latex", bold = TRUE), 
                   as.character(pp_hs))
  ) %>%
  select(-max_value) %>%  # Drop the temporary max_value column
  ungroup() %>%
  kableExtra::kable(
    format = "latex", 
    escape = FALSE,  # Render LaTeX formatting in cells
    col.names = c("Events (M)", "MLE", "Ridge", "HS"),
    caption = "Predictive Performance for Different Models and Events (M)", 
    booktabs = TRUE
  ) %>%
  kableExtra::kable_styling(full_width = FALSE)

# Print LaTeX code to the console
cat(latex_table)
```

### 4.2.2 Out-of-Sample Predictive Performance


```{r}
m = c(100, 200, 400, 800, 1600, 3200)

# Initialize an empty data frame to store results
results_oos <- data.frame(
  m = integer(),
  iteration = integer(),
  pp_mle = numeric(),
  pp_ridge = numeric(),
  pp_hs = numeric()
)

# Iterate through the values of m and the 20 iterations
for (i in seq_along(m)) {
  m_key <- paste0("m=", m[i])
  for (j in 1:20) {
    # Initialize variables for the current iteration
    mle_value <- NA
    ridge_value <- NA
    hs_value <- NA

    # Attempt to compute predictive performance, filling with NA if an error occurs
    tryCatch({
      mle_value <- predictive_performance(
        edgelists[[j]][(m[i]+1):(m[i]+500), ], covar,
        estimates[[m_key]][["mle_coefs"]][[j]][, 1],
        generate_formula(parameters), warnings = FALSE
      )
    }, error = function(e) {
      mle_value <- NA
    })

    tryCatch({
      ridge_value <- predictive_performance(
        edgelists[[j]][(m[i]+1):(m[i]+500), ], covar,
        estimates[[m_key]][["shrink_coefs_ridge"]][[j]][, 4],
        generate_formula(parameters), warnings = FALSE
      )
    }, error = function(e) {
      ridge_value <- NA
    })

    tryCatch({
      hs_value <- predictive_performance(
        edgelists[[j]][(m[i]+1):(m[i]+500), ], covar,
        estimates[[m_key]][["shrink_coefs_hs"]][[j]][, 4],
        generate_formula(parameters), warnings = FALSE
      )
    }, error = function(e) {
      hs_value <- NA
    })

    # Append the results to the data frame
    results_oos <- results_oos %>% add_row(
      m = m[i],
      iteration = j,
      pp_mle = mle_value,
      pp_ridge = ridge_value,
      pp_hs = hs_value
    )
  }
}

library(dplyr)
library(kableExtra)

latex_table <- results_oos %>%
  group_by(m) %>%
  summarise(
    pp_mle = round(mean(pp_mle, na.rm = TRUE), 3),
    pp_ridge = round(mean(pp_ridge, na.rm = TRUE), 3),
    pp_hs = round(mean(pp_hs, na.rm = TRUE), 3)
  ) %>%
  rowwise() %>%
  mutate(
    max_value = max(c(pp_mle, pp_ridge, pp_hs), na.rm = TRUE),
    pp_mle = ifelse(pp_mle == max_value, 
                    cell_spec(pp_mle, "latex", bold = TRUE), 
                    as.character(pp_mle)),
    pp_ridge = ifelse(pp_ridge == max_value, 
                      cell_spec(pp_ridge, "latex", bold = TRUE), 
                      as.character(pp_ridge)),
    pp_hs = ifelse(pp_hs == max_value, 
                   cell_spec(pp_hs, "latex", bold = TRUE), 
                   as.character(pp_hs))
  ) %>%
  select(-max_value) %>%  # Drop the temporary max_value column
  ungroup() %>%
  kableExtra::kable(
    format = "latex", 
    escape = FALSE,  # Render LaTeX formatting in cells
    col.names = c("Events (M)", "MLE", "Ridge", "HS"),
    caption = "Predictive Performance for Different Models and Events (M)", 
    booktabs = TRUE
  ) %>%
  kableExtra::kable_styling(full_width = FALSE)

# Print LaTeX code to the console
cat(latex_table)
```